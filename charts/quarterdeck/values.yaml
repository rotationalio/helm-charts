# Default values for deploying Quarterdeck.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Name overrides: by default the name for most objects will be release-quarterdeck. It
# is recommended # to create a descriptive release name, but if you must override the
# names separate from the release, you can set nameOverride. To remove the -quarterdeck
# suffix, set fullnameOverride.
nameOverride: ""
fullnameOverride: ""

# Quarterdeck operates in several modes: either as a statefulset with a sqlite database,
# or as a deployment with an external database. It is recommended to increase the
# replicaCount only when using the deployment mode.
replicaCount: 1

image:
  repository: rotationalio/quarterdeck
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []

# Global variables are available to both Endeavor and Quarterdeck charts
global:

  # Origins specifies all hosts that are in the endeavor ecosystem and is used for the
  # allowed origins setting in CORS and the audience value in Quarterdeck.
  origins: []

  # Specifies the authentication URL for Quarterdeck, which reconfigures the
  # quarterdeck subchart as needed as well as Endeavor related fields.
  issuer: ""

  # Specify a global log level for all microservices (can be overridden)
  # Verbosity of logging: trace, debug, info, warn, error, fatal, panic
  logging:
    level: info
    console: false

  # Specify a global mode for all microservices (release, debug, testing)
  # Only specify debug mode if you know what you're doing.
  mode: release


# Set the specific configuration for the Quarterdeck service. For more information about
# the various configuration options, use quarterdeck config on the command line.
quarterdeck:
  # Maintenance mode is used to start Quarterdeck without connecting to external
  # services and can be used to run the pod without starting the service for debugging.
  maintenance: false

  # Override global.mode
  mode: null

  # Override global.logging
  logLevel: null
  consoleLog: null

  # Do not set this unless you're really sure; by default it will be set to the global
  # origins for use across multiple micro-services.
  allowOrigins: null

  # Enable rate limiting to prevent spam and abuse.
  # Rate limiting is implemented as a token bucket algorithm; perSecond is the number of
  # tokens added to the bucket every second, and burst is the maximum number of tokens
  # that can be in the bucket at any time. E.g. perSecond: 32 and burst: 128 means
  # that the service can handle up to 128 requests per second, but will only reset after
  # 4 seconds of no requests.
  # TODO: allow per-IP rate limiting in addition to constant rate limiting.
  rateLimit:
    type: ipaddr
    perSecond: 32
    burst: 128
    cacheTTL: 10m

  # The DSN to connect to the database. If using a statefulset, this should be set to
  # a sqlite3 volume mount point, if using an external database, this should be
  # configured to allow connection to the databse server.
  # TODO: allow this to be stored in a secret if it has database credentials.
  database:
    URL: sqlite3:////data/db/quarterdeck.db
    readOnly: true

  # Modifies how Quarterdeck handles authentication and authorization for its applications.
  auth:
    # If you're configuring Quarterdeck to use specific Ed25519 keys, set the key value
    # to the KeyID and the value to the path the PEM encoded key is mounted to. If this is
    # empty, then Quarterdeck will generate a new key pair on startup.
    keys: {}

    # Override global.origins as the primary audience (do not set unless you know what you're doing)
    # The audience is a list of domains that are allowed to authenticate with Quarterdeck.
    # including the Quarterdeck domain itself. This is used to verify the JWT tokens
    # issued by Quarterdeck.
    audience: null

    # Override global.issuer (do not set unless you know what you're doing)
    issuer: null

    # The URL to the login page for Quarterdeck.
    loginURL: ""

    # The URL to redirect to after logging out of Quarterdeck.
    logoutRedirect: ""

    # The URL to redirect to after authenticating with Quarterdeck.
    authenticateRedirect: ""

    # The URL to redirect to after re-authenticating with Quarterdeck.
    reauthenticateRedirect: ""

    # The URL to redirect to after logging in to Quarterdeck.
    loginRedirect: ""

    # How long access and refresh tokens are valid for. The overlap is a negative duration
    # that specifies how long before an access token expires that a refresh token can be used.
    accessTokenTTL: 1h
    refreshTokenTTL: 4h
    tokenOverlap: -15m

  csrf:
    cookieTTL: "15m"
    secret: ""

  # Quarterdeck can be configured to return a security.txt file that defines security policies
  # see: https://securitytxt.org/ for more information.
  securitytxt:
    path: /data/info/security.txt
    text: ""


# Specify the secrets to be used by Quarterdeck.
# Endeavor expects these secrets are already pre-installed in the cluster and referenced
# by the name and keys below. If you want Helm to create the secrets, set create to true
# and specify the secrets values below.
secrets:
  create: false

  # If specifing keys, then you must manually create a secret with the keys as files
  # that will be mounted to the pods as specified below:
  jwks:
    secretName: ""
    mountPath: /data/jwks

  # Generally speaking the CSRF token secret does not need to be set
  csrfSecret:
    secretName: ""
    secretKey: csrfSecret
    value: ""

# Additional pod spec configuration
pod:
  annotations: {}
  labels: {}
  securityContext: {}
  resources: {}

# Additional container spec configuration
containers:
  securityContext: {}

# Define PVCs that are allocated per pod on the stateful set (e.g. quarterdeck data)
storage:
  # The database data spec will be included in volume claim templates.
  database:
    mountPath: /data/db
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 32Gi

# Configuration for the Quarterdeck service.
service:
  type: ClusterIP
  port: 8888

# Configuration for the Quarterdeck ingress.
# Currently setup for Traefik ingress routes, not nginx or k8s networking ingresses.
ingress:
  enabled: false
  apiVersion: traefik.io/v1alpha1
  className: IngressRoute
  annotations: {}
  entryPoints:
    - websecure
  tls: {}

# The liveness probe requires Quarterdeck to be running.
livenessProbe:
  httpGet:
    path: /livez
    port: 8888
    httpHeaders:
    - name: X-Kubernetes-Probe
      value: liveness
  initialDelaySeconds: 2
  periodSeconds: 10

# The readiness probe requires Quarterdeck to be running and connected to the database.
readinessProbe:
  httpGet:
    path: /readyz
    port: 8888
    httpHeaders:
    - name: X-Kubernetes-Probe
      value: readiness
  initialDelaySeconds: 2
  periodSeconds: 10

# Pod requested resources and limits.
resources: {}

# Node selector for the pods.
nodeSelector: {}

# Tolerations for the pods.
tolerations: []

# Affinity rules for the pods.
affinity: {}

# Default values for deploying endeavor.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Name overrides: by default the name for most objects will be release-endeavor. It is
# recommended to create a descriptive release name, but if you must override the names
# separate from the release, you can set nameOverride. To remove the -endeavor suffix
# set the fullnameOverride to the name you want.
nameOverride: ""
fullnameOverride: ""

# Environment should be set to "demo", "development", "staging", or "production".
environment: "production"

replicaCount: 1

image:
  repository: rotationalio/endeavor
  pullPolicy: Always                 # Specify image pull policy (Always, IfNotPresent, Never).
  tag: ""                            # Overrides the image tag whose default is the chart appVersion.

imagePullSecrets: []

# Global variables are available to both Endeavor and Quarterdeck charts
global:

  # Origins specifies all hosts that are in the Endeavor ecosystem and is used for the
  # allowed origins setting in CORS and the audience value in Quarterdeck.
  # Should be a full URLs with scheme (e.g. https://) and no trailing slashes.
  origins: []

  # Specifies the authentication URL for Quarterdeck, which reconfigures the
  # Quarterdeck subchart as needed as well as Endeavor related fields.
  # Should be a full URL with scheme (e.g. https://) and no trailing slash.
  issuer: ""

  # Specify a global log level for all microservices (can be overridden)
  # Verbosity of logging: trace, debug, info, warn, error, fatal, panic
  logging:
    level: info
    console: false

  # Specify a global mode for all microservices (release, debug, testing)
  # Only specify debug mode if you know what you're doing.
  mode: release


# Set the Endeavor specific configuration.
endeavor:
  # Maintenance mode can be used to run the pod without starting the service for debugging
  maintenance: false

  # Override global.mode
  mode: null

  # Override global.logging
  logLevel: null
  consoleLog: null

  # DSN containing backend database configuration
  databaseURL: "bolt:////data/db/endeavor.db"

  # Origin (url) of the UI server for creating endpoints and CORS access
  # Should be an absolute URL including scheme without trailing slash that matches the
  # endpoint of the ingress configured below.
  origin: ""

  # Do not set this unless you're really sure; by default it will be the origin and
  # the Quarterdeck URL to ensure that CORS is configured correctly.
  allowOrigins: null

  # Set the display name for the Endeavor API Docs
  docsName: "Endeavor API Docs"

  # Authentication configuration
  auth:
    # Override global.issuer (do not set unless you know what you're doing)
    quarterdeckURL: null

    # Override endeavor.origin as the primary audience (do not set unless you know what you're doing)
    audience: null

  # CSRF protection configuration
  csrf:
    cookieTTL: 15m

  # Manages browser security features such as Referrers, HSTS and Content Security Policies.
  secure:
    # If true adds the X-Content-Type-Options header with nosniff directive.
    contentTypeNosniff: true

    # Value for the Cross-Origin-Opener-Policy header.
    crossOriginOpenerPolicy: same-origin

    # Value for the Referrer-Policy header.
    referrerPolicy: strict-origin-when-cross-origin

    # Configure HSTS (HTTP Strict Transport Security) settings.
    hsts:
      # If non-zero, the HSTS header is added to responses.
      seconds: 63072000
      includeSubdomains: true
      preload: true

    # Specify directives for the Content-Security-Policy and Content-Security-Policy-Report-Only headers.
    # Note that if using 'self' or 'none' they must be quoted, e.g. use "'self'" or "'none'".
    # TODO: configure only the Endeavor-specific directives; these are only here as a placeholder.
    contentSecurity:
      policy:
        childSrc: []
        connectSrc: []
        defaultSrc: []
        fencedFrameSrc: []
        fontSrc: []
        frameSrc: []
        imgSrc: []
        manifestSrc: []
        mediaSrc: []
        objectSrc: []
        prefetchSrc: []
        scriptSrc: []
        scriptSrcElem: []
        scriptSrcAttr: []
        styleSrc: []
        styleSrcElem: []
        styleSrcAttr: []
        workerSrc: []
        baseUri: []
        sandbox: []
        formAction: []
        frameAncestors: []
        reportTo: ""
        requireTrustedTypesFor: []
        trustedTypes: []
        upgradeInsecureRequests: false
      reportOnly:
        childSrc: []
        connectSrc: []
        defaultSrc: []
        fencedFrameSrc: []
        fontSrc: []
        frameSrc: []
        imgSrc: []
        manifestSrc: []
        mediaSrc: []
        objectSrc: []
        prefetchSrc: []
        scriptSrc: []
        scriptSrcElem: []
        scriptSrcAttr: []
        styleSrc: []
        styleSrcElem: []
        styleSrcAttr: []
        workerSrc: []
        baseUri: []
        sandbox: []
        formAction: []
        frameAncestors: []
        reportTo: ""
        requireTrustedTypesFor: []
        trustedTypes: []
        upgradeInsecureRequests: false

  # Inference specifies the configuration for the inference client
  inference:
    endpointURL: https://openrouter.ai

  # Radish specifies the configuration for the async task client
  radish:
    workers: 8
    queueSize: 128

quarterdeck:
  enabled: true

honu:
  enabled: true

# Specify the secrets to be used by Endeavor.
# Endeavor expects these secrets are already pre-installed in the cluster and referenced
# by the name and keys below. If you want Helm to create the secrets, set create to true
# and specify the secrets values below.
secrets:
  create: false
  inferenceAPIKey:
    secretName: ""
    secretKey: inferenceAPIKey
    value: ""
  csrfSecret:
    secretName: ""
    secretKey: csrfSecret
    value: ""

# Additional pod spec configuration
pod:
  annotations: {}
  labels: {}
  securityContext: {}
  resources: {}

# Additional container spec configuration
containers:
  securityContext: {}

service:
  type: ClusterIP
  port: 8000

# Currently setup for Traefik ingress routes, not nginx or k8s networking ingresses.
ingress:
  enabled: false
  apiVersion: traefik.io/v1alpha1
  className: IngressRoute
  annotations: {}
  entryPoints:
    - websecure
  tls: {}

# The liveness probe requires Endeavor to be running.
livenessProbe:
  httpGet:
    path: /livez
    port: 8000
    httpHeaders:
    - name: X-Kubernetes-Probe
      value: liveness
  initialDelaySeconds: 2
  periodSeconds: 10

# The readiness probe requires Endeavor to be running and connected to the database.
readinessProbe:
  httpGet:
    path: /readyz
    port: 8000
    httpHeaders:
    - name: X-Kubernetes-Probe
      value: readiness
  initialDelaySeconds: 2
  periodSeconds: 10

# Additional volumes on the output Deployment definition.
volumes: []

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []

# Pod requested resources and limits.
resources: {}

# Node selector for the pods.
nodeSelector: {}

# Tolerations for the pods.
tolerations: []

# Affinity rules for the pods.
affinity: {}
